Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії


Звіт 
 з практичного заняття №1 
з дисципліни «Аналіз та рефакторинг коду» 
за темою «Правила оформлення програмного коду»








Харків 2024
МЕТА
Вивчити ключові рекомендації для написання чистого, оптимального та зрозумілого коду на Dart, а також освоїти підходи до аналізу і покращення існуючого коду.
ВСТУП
Правильне оформлення програмного коду є основою якісної розробки програмного забезпечення. Незалежно від обраної мови програмування, дотримання стандартів і правил оформлення коду робить його зрозумілим для інших розробників і сприяє ефективній співпраці в команді. Кожна мова має свої унікальні стилі та рекомендації, але загальні принципи, такі як логічна структура, зрозумілі імена змінних і функцій, а також чітке форматування, залишаються універсальними.
Дотримання правил оформлення коду забезпечує чистоту і читабельність, що значно спрощує процес налагодження, тестування та подальшої підтримки. Добре структурований код дозволяє швидко і безпомилково вносити зміни, адаптуватися до нових вимог і масштабувати проєкт. Окрім того, якісне оформлення сприяє підвищенню продуктивності команди, оскільки полегшує розуміння коду новими членами і зменшує кількість помилок, що виникають через двозначність або неузгодженість у стилях. Таким чином, правильне оформлення коду є ключовим фактором для створення надійного, масштабованого та підтримуваного програмного забезпечення.
 
Основні рекомендації для написання якісного коду на Dart
1. Вибір зрозумілих імен для змінних, функцій, класів.
Рекомендація: Вибір осмислених імен допомагає зрозуміти призначення змінних, функцій та класів. Уникайте скорочень і абревіатур.
Опис: Правильне іменування спрощує розуміння коду. Уникайте скорочень і абревіатур, які не передають сенс.
Приклад коду:
// Поганий приклад
int x = 5;
void f() {}

// Гарний приклад
int userAge = 5;
void fetchData() {}

2. Коментарі до коду: коли і як їх використовувати.
Рекомендація: Додавайте коментарі для пояснення складних частин.
Опис: Коментарі допомагають розуміти логіку коду, але їх слід використовувати обдумано, без надлишку.
Приклад коду:
// Поганий приклад
// Ініціалізація змінної
int age = 25;

// Гарний приклад
// Максимально допустимий вік користувача
int maxUserAge = 120;

3. Структурування коду (відступи та порожні рядки).
Рекомендація: Дотримуйтеся єдиної структури.
Опис: Використовуйте 2 пробіли для відступів і порожні рядки для логічного поділу частин коду.
Приклад коду:
// Поганий приклад
void main(){print("Hello");int x=5;}

// Гарний приклад
void main() {
  print("Hello");
  
  int x = 5;
}

4. Чіткість та стислость функцій.
Рекомендація: Створюйте функції, що виконують лише одну логічну задачу.
Опис: Це спрощує тестування, повторне використання та читабельність функцій.
Приклад коду:
// Поганий приклад
void processOrder(int orderId) {
  bool isAvailable = checkAvailability(orderId);
  if (isAvailable) {
    print("Order processed");
  }
}

// Гарний приклад
void processOrder(int orderId) {
  if (isAvailable) {
    print("Order processed");
  }
}

bool checkAvailability(int orderId) {
  return true;
}

5. Форматування коду: відступи, дужки та вирівнювання.
Рекомендація: Дотримуйтеся узгодженого стилю форматування.
Опис: Використовуйте 2 пробіли для відступів, розташовуйте фігурні дужки на новому рядку, а оператори відокремлюйте пробілами.
Приклад коду:
// Поганий приклад
if(isValid){print("Valid");}else{print("Invalid");}

// Гарний приклад
if (isValid) {
  print("Valid");
} else {
  print("Invalid");
}

6. Обробка помилок.
Рекомендація: Завжди рефакторіть код для підвищення читабельності.
Опис: Покращене форматування допомагає уникнути плутанини та помилок.
Приклад коду:
// Поганий приклад
void processOrder(int orderId) {
  if (orderId == 0) {
    print("Order not found");
  } else {
    // Виконується інша логіка
    print("Order processed");
  }
}

// Гарний приклад
void processOrder(int orderId) {
  try {
    if (orderId == 0) throw Exception("Order not found");
    print("Order processed");
  } catch (e) {
    print(e);
  }
}

7. Оформлення файлів та структури проєкту.
Рекомендація: Організовуйте файли в логічну структуру.
Опис: Зрозуміла ієрархія спрощує навігацію по проєкту.
Приклад: 
lib/
├── models/
│   └── user_model.dart
├── screens/
│   └── home_screen.dart
└── widgets/
    └── custom_button.dart
 
ВИСНОВКИ
Якість програмного коду є ключовою складовою ефективної розробки, підтримки та розширення програмного забезпечення. Для досягнення високої якості коду необхідно дотримуватись осмисленого іменування змінних, функцій і класів. Імена мають бути зрозумілими та інтуїтивно логічними, що полегшує читання та зменшує ймовірність помилок. Використання чіткої структури іменування сприяє зрозумілості та швидкому освоєнню коду іншими розробниками.
Форматування відіграє важливу роль у підвищенні читабельності та підтримуваності коду. Використання узгоджених відступів, пробілів і порожніх рядків допомагає структуризувати код, роблячи його візуально приємним і легким для аналізу. Не менш важливим є дотримання стандартів оформлення, таких як розташування дужок і вирівнювання операторів. Також варто уникати надлишку коментарів, залишаючи їх лише там, де вони дійсно необхідні для пояснення складної логіки або незвичних рішень.
Ще одним важливим принципом є простота і логічність функцій. Кожна функція повинна виконувати одну задачу, що значно полегшує її тестування, повторне використання та адаптацію. Логічна організація файлів і структура проєкту допомагають зберегти порядок, що важливо при роботі в команді. Дотримання цих принципів сприяє створенню підтримуваного, масштабованого та зрозумілого коду, який відповідає сучасним стандартам розробки програмного забезпечення.
 
ДОДАТОК А
Список використаних джерел
1. Dart documentation | Dart. URL: https://dart.dev/guides (дата звернення: 10.12.2024).
2. Dart Programming for Flutter: Beginners Tutorial [ FREE COURSE ] Overview. Smartherd. URL: https://www.youtube.com/watch?v=5rtujDjt50I&list=PLlxmoA0rQ-LyHW9voBdNo4gEEIh0SjG-q (дата звернення: 13.12.2024)
 
ДОДАТОК Б
Відео-звіт - https://youtu.be/8KGN34u0Kmo
 
ДОДАТОК В
Презентація