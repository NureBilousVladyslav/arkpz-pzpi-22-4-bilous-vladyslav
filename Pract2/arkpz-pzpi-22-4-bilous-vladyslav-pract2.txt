Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії


Звіт 
 з практичного заняття №2
з дисципліни «Аналіз та рефакторинг коду» 
за темою «Методи рефакторингу коду програмного забезпечення»








Харків 2025
МЕТА
Вивчити основні методи рефакторингу коду на основі реальних прикладів з власних програмних проєктів. Навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.
ВСТУП
Сучасне програмне забезпечення постійно еволюціонує, стаючи все більш складним і масштабним. Для того, щоб підтримувати його функціональність, зручність у використанні та можливість подальшого розвитку, необхідно постійно працювати над якістю вихідного коду. Одним із найважливіших інструментів для забезпечення якісного коду є рефакторинг. Цей процес дозволяє вносити структурні зміни у вихідний код без зміни його зовнішньої поведінки, що робить його легшим для розуміння, підтримки та розширення.
Основна мета рефакторингу - усунення технічного боргу. Код, написаний у поспіху, часто страждає на низьку читабельність, дублювання функцій, надмірну складність умовної логіки або інші проблеми, які ускладнюють його підтримку. Такі проблеми можуть спричинити затримки у розробці, виникнення помилок та підвищення витрат на підтримку. Застосовуючи методи рефакторингу, описані в книзі Мартіна Фаулера «Refactoring. Improving the Design of Existing Code», можна поступово вирішити ці проблеми, покращити якість коду та оптимізувати робочі процеси.
У рамках цього практичного заняття ми отримаємо можливість застосувати обрані методи рефакторингу до свого власного коду, що дозволить не лише теоретично засвоїти матеріал, але й на практиці побачити переваги оптимізації програмного коду. Використовуючи такі методи, як виділення методу, перейменування методу та заміна умовної логіки поліморфізмом, ми навчимося не тільки ідентифікувати проблеми, а й вирішувати їх ефективним способом. 
 
МЕТОДИ РЕФАКТОРИНГУ КОДУ
Метод 1: Extract Method (Виділення методу).
Опис проблеми.
Метод містить довгий фрагмент коду, який виконує кілька різних завдань, що ускладнює його розуміння та підтримку. Такий код важко повторно використовувати, а його тестування стає більш складним через відсутність чіткої структури. Використання методу "Extract Method" дозволяє розділити код на менші, зрозуміліші частини, кожна з яких виконує одну конкретну задачу, що підвищує читабельність і спрощує підтримку та тестування.
Код до рефакторингу.
# Python
class Order:
    def calculate_total(self, items, tax):
        total = 0
        for item in items:
            total += item.price * item.quantity
        tax_amount = total * tax
        return total + tax_amount
Пояснення обраного методу.
Метод "Extract Method" було обрано, оскільки він дозволяє виділити логічно завершені частини коду в окремі методи, те, чого не вистачало в приведеному коді, що підвищує модульність та спрощує роботу з кодом.
Код після рефакторингу.
# Python
class Order:
    def calculate_total(self, items, tax):
        total = self._calculate_items_total(items)
        return total + self._calculate_tax(total, tax)

    def _calculate_items_total(self, items):
        return sum(item.price * item.quantity for item in items)

    def _calculate_tax(self, total, tax):
        return total * tax
Переваги обраного методу:
•	Код став більш структурованим і читабельним.
•	Кожен метод виконує лише одну задачу.
•	Легше тестувати окремі частини функціоналу.
Метод 2: Rename Method (Перейменування методу)
Опис проблеми.
Назва методу в початковій версії коду не відображає його справжнього призначення, що може заплутати інших розробників і призвести до його неправильного використання. Це знижує зрозумілість коду, ускладнює його підтримку та підвищує ризик виникнення помилок. Метод "Rename Method" дозволяє зробити назви логічно-зрозумілими, що покращує зрозумілість і зменшує кількість помилок.
Код до рефакторингу.
// Java
class User {
    public boolean chkPwd(String pwd) {
        return pwd.length() > 8;
    }
}
Пояснення обраного методу.
"Rename Method" обрано для підвищення зрозумілості коду, оскільки точна назва методу допомагає розробникам інтуїтивно зрозуміти його функціональність без додаткової документації.
Код після рефакторингу.
// Java
class User {
    public boolean isPasswordStrong(String password) {
        return password.length() > 8;
    }
}
Переваги.
•	Назва методу тепер чітко відображає його функціональність.
•	Зменшується ризик неправильного використання методу.
•	Покращується самодокументування коду.
Метод 3: Replace Conditional with Polymorphism (Заміна умовної логіки поліморфізмом)
Опис проблеми:
У класі початкової версії коду присутня велика умовна конструкція, яка ускладнює читання та розширення функціоналу. Такий код важко розуміти, тестувати і підтримувати, а додавання нового функціоналу потребує змін у багатьох місцях. Метод "Replace Conditional with Polymorphism" дозволяє усунути ці проблеми через використання спадкування та поліморфізму, що робить структуру коду більш зрозумілою і гнучкою.
Код до рефакторингу.
// C#
class Animal {
    public string Speak(string animalType) {
        if (animalType == "dog") {
            return "Woof!";
        } else if (animalType == "cat") {
            return "Meow!";
        } else {
            return "Unknown sound";
        }
    }
}
Пояснення обраного методу:
Метод "Replace Conditional with Polymorphism" дозволяє зробити код зрозумілішим і масштабованішим, оскільки умовна логіка замінюється на окремі класи, кожен з яких реалізує необхідну поведінку. Це забезпечує легкість додавання нових класів і зменшує ризик помилок під час змін.
Код після рефакторингу:
// C#
abstract class Animal {
    public abstract string Speak();
}

class Dog : Animal {
    public override string Speak() {
        return "Woof!";
    }
}

class Cat : Animal {
    public override string Speak() {
        return "Meow!";
    }
}
Переваги:
•	Легко додавати нові класи без змін у базовому коді.
•	Код став зрозумілішим та масштабованішим.
•	Зменшилась кількість умовних операторів, що додасть зрозумілості коду та оптимізації конвеєрній обробці коду.

 
ВИСНОВКИ
Рефакторинг коду є одним із ключових процесів у забезпеченні якісного та ефективного програмного забезпечення. Використання методів рефакторингу, таких як виділення методів, перейменування, а також заміна умовної логіки поліморфізмом, дозволяє усунути технічний борг і підвищити якість коду, зробивши його структурованим і зрозумілим. Завдяки рефакторингу розробники отримують можливість більш ефективно підтримувати, оновлювати та розширювати функціонал програмного забезпечення, що зменшує ризики виникнення помилок і полегшує розробку нових функцій.
Практичне застосування методів рефакторингу сприяє не лише усуненню проблем, пов’язаних із надмірною складністю чи дублюванням коду, але й створенню систем, які більш адаптивні до змін. Наприклад, метод "Extract Method" дозволяє розподілити великий код на невеликі функціональні блоки, які зручно тестувати й використовувати повторно. Метод "Rename Method" полегшує розуміння призначення коду іншими розробниками, забезпечуючи інтуїтивне орієнтування в проєкті. Використання поліморфізму замість умовної логіки дозволяє зменшити складність класів, роблячи їх незалежними та масштабованими.
Застосування методів рефакторингу позитивно впливає на всі етапи життєвого циклу програмного забезпечення. Воно підвищує продуктивність роботи розробників завдяки полегшенню розуміння й тестування коду, зменшує ризики помилок і час на їхнє виправлення. Окрім того, структурований код забезпечує стабільність програмного забезпечення навіть в умовах швидкої зміни вимог і технологій. Таким чином, рефакторинг є важливим інструментом, що сприяє розвитку сучасних програмних рішень і дозволяє підтримувати їх актуальність у динамічному середовищі індустрії інформаційних технологій.
 
ДОДАТОК А
Список використаних джерел
1.	Мартін Р. Чистий код: створення і рефакторинг за допомогою AGILE. – ФАБУЛА, 2019. – 416 с.
2.	Microsoft. C# Documentation. Взято з: https://docs.microsoft.com/en-us/dotnet/csharp/
3.	Python Software Foundation. Python Documentation. Взято з: https://docs.python.org/3/
4.	Oracle. Java Platform, Standard Edition Documentation. Взято з: https://docs.oracle.com/en/java/javase/
 
ДОДАТОК Б
Відео-звіт: https://youtu.be/hD5aTWLfVcU
 
ДОДАТОК В
Презентація